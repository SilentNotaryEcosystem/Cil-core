syntax = "proto3";

package structures;

//------------------- Tx ---------
message input{
    bytes txHash=1;
    uint32 nTxOutput=2;
}

// TODO: change to oneOf ... one for regular payment another for Contracts
message output{

    // possibly here should be uint64 or bytes (BN)
    fixed64 amount=1;

    // payment receiver
    bytes receiverAddr=2;

    // if receiverAddr is AddrContractCreation or function call (not user otherwise)
    string contractCode=3;
    bytes addrChangeReceiver=4;
}

message TransactionPayload {
    uint32 version=3;
    uint32 conciliumId=4;

    // place here all fields that will be hashed
    repeated input ins=1;
    repeated output outs=2;
}

message Transaction {

    // place here non hashed fields
    TransactionPayload payload=1;
    repeated bytes claimProofs=2;

    // used only when contractOwner plan to send moneys or transfer ownership
    bytes txSignature=3;
}

//------------------- Block ---------

message BlockHeader{
    repeated bytes parentHashes=1;
    bytes merkleRoot =2;
    uint32 conciliumId=3;
    uint32 timestamp=6;
    uint32 version=7;
    uint32 height=8;
}

message Block{
    BlockHeader header=1;
    repeated Transaction txns=2;
    repeated bytes signatures=3;
}

//------------------- Inventory ---------

enum InventoryTypes{
    INV_TX = 11;
    INV_BLOCK = 21;
}

message InventoryVector{
    InventoryTypes type =1;
    bytes hash =2;
}

message Inventory{
    repeated InventoryVector invVector=1;
}

//------------------- UTXO ---------

message UTXO{
    repeated uint32 arrIndexes =1;
    repeated output arrOutputs =2;
}

//--------------- Witness concilium definition ---------

message ConciliumParameters{
    uint32 feeTxSize=1;
    uint32 feeContractCreation=2;
    uint32 feeContractInvocation=3;
}

message ConciliumDefinition{
    repeated bytes publicKeys=1;
    uint32 conciliumId=3;
    uint32 quorum=4;
    uint32 minFee=5;
    repeated bytes delegatesPublicKeys=7;
    ConciliumParameters parameters=8;
}

//--------------- Block summary info (for storage) -----

message BlockInfo{
    BlockHeader header=1;
    uint32 flags=2;
}

//--------------- Contract info (for storage) -----

message Contract{
    bytes contractData =1;
    string contractCode=2;
    uint32 conciliumId=3;
    fixed64 balance=4;
}

//--------------- TX Receipt -----

enum TxStatuses{
    TX_STATUS_FAILED = 0;
    TX_STATUS_OK = 1;
}

message TxReceipt{

    // if contract was created
    bytes contractAddress =1;

    // actual fee for contract exec (i think unit32 should be enough)
    uint32 coinsUsed =2;

    //
    TxStatuses status =3;

    // if status != TX_STATUS_OK here will be a message
    string message =5;

    // hashes
    repeated bytes internalTxns=4;

    // coins from internalTxns (i.e. same indexes)
    repeated output coins=6;
}
